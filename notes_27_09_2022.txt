






public class CustomerLoginRepositoryImpl {}


 CustomerLoginRepositoryImpl customerLoginRepositoryImpl = new CustomerLoginRepositoryImpl();

// In the above line we are creating the reference of the class and object is also of the class CustomerLoginRepositoryImpl.



public interface CustomerLoginRepository{}
public class CustomerLoginRepositoryImpl implements CustomerLoginRepository{}

// Interface always brings in loosely coupled code.
Loosely coupled code is when we have classes like A and B. The class A is dependent on class B.
So when we are making changes in the class B , in that case if the code is loosely coupled we dont
have to make major changes in the code of A.

public class ListOfNames {

     private ArrayList<String> list=new ArrayList<>();

     public void addNames(String name){
         list.add(name);
     }

    public ArrayList<String> getList(){
      return list;
    }

   }

  public class Main {
    public static void main(String args[]){
      Scanner scan=new Scanner(System.in);
      ListOfNames names=new ListOfNames();
      String name=scan.next();
      names.addNames(name);
      ArrayList<String> list=names.getList();
    

   }
 }

// If  we decide that from ArrayList we have to make it as LinkedList, 
it has to be changed in multiple places. 

public class ListOfNames {

     private LinkedList<String> list=new LinkedList<>();   ----> First change (2 changes)

     public void addNames(String name){
         list.add(name);
     }

    public ArrayList<String> getList(){   -----> Second change ( 1 Change)
      return list;
    }

   }

  public class Main {
    public static void main(String args[]){
      Scanner scan=new Scanner(System.in);
      ListOfNames names=new ListOfNames();
      String name=scan.next();
      names.addNames(name);
      ArrayList<String> list=names.getList();  -----> Third change ( 1 Change)
    

   }
 }

But in place of creating the reference of The class type , if we create the reference of interface type,
we dont have to make much changes.

import java.util.List;
import java.util.ArrayList;
public class ListOfNames {

     private List<String> list=new ArrayList<String>();

     public void addNames(String name){
         list.add(name);
     }

    public List<String> getList(){
      return list;
    }

   }

  public class Main {
    public static void main(String args[]){
      Scanner scan=new Scanner(System.in);
      ListOfNames names=new ListOfNames();
      String name=scan.next();
      names.addNames(name);
      List<String> list=names.getList();
    

   }
 }


import java.util.List;
import java.util.ArrayList;

public class ListOfNames {

     private List<String> list;

    public ListNames(){   //Constructor to initialise
    list=new ArrayList<String>();
    }

     public void addNames(String name){
         list.add(name);
     }

    public List<String> getList(){
      return list;
    }

   }

  public class Main {
    public static void main(String args[]){
      Scanner scan=new Scanner(System.in);
      ListOfNames names=new ListOfNames();
      String name=scan.next();
      names.addNames(name);
      List<String> list=names.getList();
    

   }


Now convert from ArrayList to LinkedList

public class ListOfNames {

     private List<String> list=new LinkedList<>(); ===> 1 Change

     public void addNames(String name){
         arrayList.add(name);
     }

    public List<String> getList(){
      return list;
    }

   }

  public class Main {
    public static void main(String args[]){
      Scanner scan=new Scanner(System.in);
      ListOfNames names=new ListOfNames();
      String name=scan.next();
      names.addNames(name);
      List<String> list=names.getList();
    

   }
 }
// This approach is better but still we have a flaw that we have to open the code and make a change in a single place.
// That also we want to avoid and we want to make the code as fully loose coupled code.


--------------------------------------------------------------------------------------------------------------------


public class ListOfNames {

     private List<String> list;


    public ListOfNames(List list)
    {
    this.list=list;
    }

    public void setList(List list){
     this.list=list;
    }

     public void addNames(String name){
         arrayList.add(name);
     }

    public List<String> getList(){
      return list;
    }

   }

  public class Main {
    public static void main(String args[]){
      List<String> list=new LinkedList<>();
      Scanner scan=new Scanner(System.in);
      ListOfNames names=new ListOfNames(list);
      String name=scan.next();
      names.addNames(name);
      List<String> list=names.getList();
    

   }
 }

// This approach is much better as we dont have to make changes in the ListOfNames class.
--------------------------------------------------------------------------------------------------------------------------
What is a framework?
It is providing us with the execution environment and provide us with the API Application Programming Interface(Classes and Interfaces) related to the relevant framework. 
So the flow of execution of the code is controlled by the framework. 
--------------------------------------------------------------------------------------------------------------------------
Server====> A software which is accepting the user's request and providing the resourse which is asked by the user ( browser/client 
application).

Web Servers ====> Web Servers will be comparatively smaller in size in application server and require less hardware resource. 
Apache Tomcat,Jetty 
Application Servers====> It is much more bigger in size and provides solution for many enterprise requirements. 
JBOSS,Weblogic,GlassFish
---------------------------------------------------------------------------------------------------------------------------------
In our kind of requirement with Spring, we can use the web server.

 Instead, a technique called Dependency Injection (DI) is used. It is a technique in which the responsibility of creating, assembling and wiring the dependencies of a dependent class is externalized to the external framework or library called dependency injection (DI) frameworks. Now the control over the construction, wiring and assembly of an object no longer resides with the dependent classes themselves. This reversal of responsibilities is sometimes also known as Inversion of Control(IoC). Dependency injection framework are also called as IoC containers. 

When a class A is dependent on the object of class B. Then the creation of object B will be done by following the dependency Injection. Which means object will be injected in the code when the object is required during the runtime and it will be done
by a container ( runtime environment ) called IOC( Inversion of Control) container. Why it is called as Inversion because here
we are making the Dependent class free from creating the object of the class on which it is dependent.
-------------------------------------------

public class A{

   private B b; // We are not creating the object but we are just creating the reference variable and we all know the reference
  variables are created during the compilation time of the code.

   public A(B b){
     this.b=b;
   }
 }



  IOC container will look that the class A needs the object of class B, then it will create the object of class B and will provide
the object during the runtime.If it is not so

public class A{

   private B b; 

   public A(B b){
     this.b=b;
   }
 }

public class C{
  public static void main(String args[]){
 
    B b=new B();
    A a=new A(b);  
}
}

// Both the object are created by the coder while writing the code. 
---------------------------------------------------------------------------------------------------------------------------------
IOC containers

BeanFactory interface: It represents container which provides basic functionalities. It instantiates bean whenever asked for by the client application. Using its getBean() method,  you can get instances of beans(objects which are instantiated and their life cycle is controlled by IOC container). It instantiates bean objects only when getBean() method is called.

ApplicationContext interface: It extends BeanFactory interface and provides additional functionalities to support enterprise application development. It instantiates all beans when container is loaded. There are many implementations of this interface. Some commonly used implementation class.

public interface BeanFactory{}
public interface ApplicationContext extends BeanFactory {}  // One interface will extend another interface and not implement

----------------------------------------------------------------------------------------------------------------------------------
ClassPathXmlApplicationContext : It is used to process XML-based configuration metadata.

AnnotationConfigApplicationContext : It is used to process Java‚Äêbased configuration metadata.
------------------------------------------------------------------------------------------------------------------------------

So as ApplicationContext and BeanFactory are interfaces we cannot create an object of these interfaces but we can 
create a reference a variable of the interfaces and store the address/referencce of the object of the class which has implmented
the interface.

We have classes like ClassPathXmlApplicationContext(XML configuration we are not make use of this) and AnnotationConfigApplicationContext(annotation based and java based configuration which are implementing ApplicationContext
interface.
//ApplicationContext context=new AnnotationConfigAppicationContext();


Qwhat is the parameter in the constructor of AnnotationConfigApplicationContext?
A We have a class or we created a user defined class with the name SpringConfig. 

Q Can we have any other name?
A Yes as it is an user defined class.

Q What this class contains?
A This class contains the information about the beans/objects which will be created by the IOC container.


public class HelloWorld{

  public void greet(){
   System.out.println("Hello World");
  }
}


@Configuration  // Configuration is a pre defined annotation which is used to say that the class on which it is applied
// is a configuration related class which is having the information about the beans/objects which will be created by the
// IOC container
public class SpringConfig {	
	@Bean  // The method below will create an object/bean of HelloWorld class
	public HelloWorld helloWorld() {  //Method should have return type same as of the class whose object we want to be created 
                                          // by IOC container
		return new HelloWorld();
	}
}

public class Class{}===> class Class store the reference of the Class type. So example of class type. Welcome.class, Hello.class,Main.class

public class Object{}
Class classObject=Welcome.class;

public class Tester{

 public static void main(String args[]){
    //STEP1==> We created an object of IOC container though IOC container ApplicationContext is an interface,
    // We are creating an object of AnnotationConfigApplicationContext which is a class implementing the interface ApplicationContext
    // The constructor of AnnotationConfigApplicationContext should have a parameter of type class ( In java we have a class With the name Class). 
   ApplicationContext ctx = new AnnotationConfigApplicationContext(SpringConfig.class);
// The above line we are saying that the IOC container should create objects and the information related to the class for the
// object creation is provided within the class SpringConfig.

Q How come the framework will know that SpringConfig is a configuration class?
A With the annotation @Configuration.

Q What next after the IOC container is intialised with the information of the configuration class?
A: We need to get the Bean from the applicationcontext object which is an IOC container.

   HelloWorld hello=ctx.getBean(HelloWorld.class);  // getBean is a method of ApplicationContext which will return an object of the 
   // bean related class. 
   OR
   HelloWorld hello=ctx.getBean("helloWorld"); // Here the parameter is the method name which is creating an object of the bean class.
   // The above code will give compilation error because return type is of Object type.
    HelloWorld hello=(HelloWorld)ctx.getBean("helloWorld");
   // We need to typecast if in the parameter we are passing the method name.

   hello.greet();
   }
}
======================================================================================================================== 
Java Based creation of bean/object

public class HelloWorld{

  public void greet(){
   System.out.println("Hello World");
  }
}

@Configuration
public class SpringConfig {	
	@Bean
	public HelloWorld helloWorld() {  
		return new HelloWorld();
	}
}

 public class Main{
 {
 public static void main(String args[]){
  
   ApplicationContext ctx = new AnnotationConfigApplicationContext(SpringConfig.class);
   HelloWorld hello=ctx.getBean(HelloWorld.class);  
   hello.greet();
   }
}

----------------------------------------------------------------------------------------------------------

Annotations are interfaces ... We have some predefined annotations. @Override is a predefined Annotation.
We can even create our own annotation. Annnotation are called metadata. 

What is metdata?
It is data about data. 

For whom we are using this annotations/who will interpret the annotations which we use with class or methods?
The annotations are interpreted by the runtime environment or by the framework.
---------------------------------------------------------------------------------------------------------------------------

public @interface Configuration {}
public interface Calculator{}
----------------------------------------------------------------------------------------------------------------------------
Let us see the demo.

1) Let us create a maven project where artifact id will be springdemo1.
File----->New------>Other------------>Maven project------>skip archetype(by checking the checkbox)
groupid com.infosys
artifactid springdemo1
Click on finish.

2) let use create some packages and classes.
 
  package com.infosys.beans;
    public class HelloWorld{

  public void greet(){
   System.out.println("Hello World");
  }
 }


  package com.infosys.configuration;
   @Configuration
   public class SpringConfig {	
	@Bean
	public HelloWorld helloWorld() {  
		return new HelloWorld();
	}
    }


package com.infosys.userinterface;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import com.infosys.beans.HelloWorld;
import com.infosys.configuration.SpringConfig;
public class Main {
	public static void main(String[] args) {
	ApplicationContext context=new AnnotationConfigApplicationContext(SpringConfig.class);
        HelloWorld hw=context.getBean(HelloWorld.class);
        hw.greet();
	}
}


  
// All the annotations like @Configuration and @Bean and the interface like ApplicationContext and the class AnnotationConfigApplicationContext are within the API related to Spring. That we dont get with the Java Runtime.

Q What is the solution?
A We have to look for the dependencies and update the pom.xml so that it should go for downloading the jar files which is 
are having the relavant annotations,interface and class.
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.infosys</groupId>
  <artifactId>springdemo1</artifactId>
  <version>0.0.1-SNAPSHOT</version>
 <dependencies>
    <!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
      <version>5.3.23</version>
    </dependency>
 </dependencies>
</project>

Q How I will get the dependency related info?
A So we have a site which is related with maven repo informations.

---------------------------------------------------------------------------------------------
Let us practice:

1) Let us create a maven project.
2) Let us skip archetype.
3) Let us update pom.xml for dependency. 

<properties>
      <maven.compiler.source>11</maven.compiler.source>
    <maven.compiler.target>11</maven.compiler.target>
</properties>

<properties>
    <java.version>17</java.version>
    <maven.compiler.source>${java.version}</maven.compiler.source>
    <maven.compiler.target>${java.version}</maven.compiler.target>
</properties>



<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.infosys</groupId>
  <artifactId>springdemo2</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <properties>
    <java.version>11</java.version>
    <maven.compiler.source>${java.version}</maven.compiler.source>
    <maven.compiler.target>${java.version}</maven.compiler.target>
</properties>
  <dependencies>
    <!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-context</artifactId>
    <version>5.3.23</version>
</dependency>
 </dependencies>
</project>




package com.infosys.beans;

public class Calculator {
private int number1;
private int number2;
private int result;
public int getNumber1() {
	return number1;
}
public void setNumber1(int number1) {
	this.number1 = number1;
}
public int getNumber2() {
	return number2;
}
public void setNumber2(int number2) {
	this.number2 = number2;
}
public int getResult() {
	return result;
}
public void setResult(int result) {
	this.result = result;
}
public int add() {
	result=number1+number2;
	return result;
}

}


package com.infosys.configuration;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import com.infosys.beans.Calculator;

@Configuration
public class SpringConfig {
     @Bean
	 public Calculator calculator() {
		 return new Calculator();
	 }
}

package com.infosys.userinterface;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import com.infosys.beans.Calculator;
import com.infosys.configuration.SpringConfig;

public class Tester {

	public static void main(String[] args) {
	ApplicationContext applicationContext=new AnnotationConfigApplicationContext(SpringConfig.class);
	Calculator calc=(Calculator)applicationContext.getBean("mycalculator");//The return type is Object type so we have to typecast
	calc.setNumber1(1);
	calc.setNumber2(10);
	System.out.println(calc.add());

	}

}

So the difference in the approach from core java coding:

* In core java if we would have created the object of Calculator in main , we should have gone for writing
  Calculator calc=new Calculator();
  Than who is creating the object in the current related application?
  IOC container is creating the object.
  What is the name of the IOC container which we used in the program?
  ApplicationContext
  ApplicationContext is an interface so how we are getting an object of IOC container?
  We created an object of AnnotationApplicationContext which implemented the interface ApplicationContext.
  While creating the object of IOC container, what we are passing as a parameter to the constructor?
  Class object of SpringConfig.
  What SpringConfig class contains?
  A method which is annotated with @Bean returns an object or bean.
  What are the annotations which you have used in the Configuration class?
  @Configuration at class level and @Bean at method level
  What is the method of ApplicationContext which is returning a bean object?
  getBean
  What are the different parameters the getBean method can accept?
  1) The class object of the bean class.
  2) method name of the method annoted with @Bean.
  3) bean name mentioned as @Bean(name="beanname")
----------------------------------------------------------------------------------------------------------------------
 Final variables we should write in uppercase.
 
public static final Log LOGGER = LogFactory.getLog(UserInterface.class); 

// Create an object of Log with the help of LogFactory getLog method. The getLog method should be intialised with the object of class
for which you want to log the message.
LOGGER.info(welcomeBean.printWelcome());
---------------------------------------------------------------------------------------------------------------
 Java annotation-based configuration:-

Let us see the changes:- With the bean class we are going to make use of the class level annotation called @Component.
   
 package com.infosys.beans;
    @Component
    public class HelloWorld{

  public void greet(){
   System.out.println("Hello World");
  }
 }

 package com.infosys.configuration;
   @Configuration
   @ComponentScan(basePackages="com.infosys.beans")  // This annotation is used to inform the IOC container that the class which is
       // annoted with @Component is available within the backage com.infosys.beans
   public class SpringConfig {	}


package com.infosys.userinterface;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import com.infosys.beans.HelloWorld;
import com.infosys.configuration.SpringConfig;
public class Main {
	public static void main(String[] args) {
	ApplicationContext context=new AnnotationConfigApplicationContext(SpringConfig.class);
        HelloWorld hw=(HelloWorld)context.getBean("helloWorld");  // With the class which is annotated with @Component, make the
       // first character in smallcase and use with the getBean
        hw.greet();
	}
}

The changes:-
1) We annotated the Bean class with the Annotation @Component.
2) Within the configuration class, we used another annotation called @ComponentScan where we mentioned the package name of the class
which is annotated with @Component.
3) Within the SpringConfig class we dont have to go for any @Bean declaration.
----------------------------------------------------------------------------------------------------------------------------------

